{"version":3,"sources":["GlobalStyle.js","images/react-movie-logo.svg","images/tmdb_logo.svg","components/Header/Header.styles.js","components/Header/index.js","config.js","images/no_image.jpg","components/HeroImage/HeroImage.style.js","components/HeroImage/index.js","API.js","helpers.js","hooks/useHomeFecth.js","components/Grid/Grid.styles.js","components/Grid/index.js","components/Thumb/Thumb.styles.js","components/Thumb/index.js","components/Spinner/index.js","components/Spinner/Spinner.styles.js","images/search-icon.svg","components/SearchBar/SearchBar.styles.js","components/SearchBar/index.js","components/Bottom/Button.styles.js","components/Bottom/index..js","components/Home.js","components/BreadCrumb/BreadCrumb.styles.js","components/BreadCrumb/index.js","components/MovieInfo/MovieInfo.styles.js","components/MovieInfo/index.js","components/MovieInfoBar/MovieInfoBar.styles.js","components/MovieInfoBar/index.js","components/Actor/Actor.styles.js","components/Actor/index.js","components/Movie.js","hooks/useMovieFetch.js","components/NotFound.js","App.js","index.js"],"names":["GlobalStyle","createGlobalStyle","Wrapper","styled","div","Content","LogoImg","img","TMDBLogoImg","Header","to","src","RMDBLogo","alt","TMDBLogo","API_URL","API_KEY","process","SEARCH_BASE_URL","POPULAR_BASE_URL","REQUEST_TOKEN_URL","LOGIN_URL","SESSION_ID_URL","IMAGE_BASE_URL","BACKDROP_SIZE","POSTER_SIZE","image","Text","HeroImage","title","text","defaultConfig","method","headers","apiSettings","fetchMovies","searchTerm","page","a","endpoint","fetch","json","fetchMovie","movieId","fetchCredits","creditsEndpoint","getRequestToken","reqToken","request_token","authenticate","requestToken","username","password","bodyData","body","JSON","stringify","success","sessionId","rateMovie","value","rating","calcTime","time","hours","Math","floor","mins","convertMoney","money","Intl","NumberFormat","style","currency","minimumFractionDigits","format","isPersistedState","stateName","sessionState","sessionStorage","getItem","parse","initialState","results","total_pages","total_results","Grid","header","children","Image","Thumb","clickable","Spinner","SearchBar","setSearchTerm","useState","state","setState","initial","useRef","useEffect","current","timer","setTimeout","clearTimeout","searchIcon","type","placeholder","onChange","e","target","button","Button","callback","onClick","Home","loading","setLoading","error","setError","isLoadingMore","setIsLoadingMore","API","movies","prev","setItem","useHomeFetch","backdrop_path","original_title","overview","map","id","poster_path","NoImage","BreadCrumb","movieTitle","backdrop","MovieInfo","movie","className","vote_average","directors","length","director","name","credit_id","MovieInfoBar","budget","revenue","Actor","imageUrl","character","Movie","useCallback","credits","crew","filter","member","job","actors","cast","useMovieFetch","useParams","runtime","actor","profile_path","NotFound","App","path","element","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.eab86cd7.chunk.js","sourcesContent":["import {createGlobalStyle} from 'styled-components';\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n    :root {\r\n    --maxWidth: 1280px;\r\n    --white: #fff;\r\n    --lightGrey: #eee;\r\n    --medGrey: #353535;\r\n    --darkGrey: #1c1c1c;\r\n    --fontSuperBig: 2.5rem;\r\n    --fontBig: 1.5rem;\r\n    --fontMed: 1.2rem;\r\n    --fontSmall: 1rem;\r\n}\r\n\r\n* {\r\n    box-sizing: border-box;\r\n    font-family: 'Abel', sans-serif;\r\n}\r\n\r\nbody {\r\n    margin: 0;\r\n    padding: 0;\r\n    \r\n}\r\n\r\nbody {\r\n    margin: 0;\r\n    padding: 0;\r\n}\r\n\r\nh1 {\r\n    font-size: 2rem;\r\n    font-weight: 600;\r\n    color: var(--white);\r\n}\r\n\r\nh3 {\r\n    font-size: 1.1rem;\r\n    font-weight: 600;\r\n}\r\n\r\np {\r\n    font-size: 1rem;\r\n    color: var(--white);\r\n}\r\n`","export default __webpack_public_path__ + \"static/media/react-movie-logo.35f4d399.svg\";","export default __webpack_public_path__ + \"static/media/tmdb_logo.e7029961.svg\";","import styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.div`\r\nbackground: var(--darkGrey);\r\npadding: 0 20px;`;\r\nexport const Content = styled.div`\r\ndisplay: flex;\r\nalign-items: center;\r\njustify-content: space-between;\r\nmax-width: var(--maxWidth);\r\npadding: 20px 0;\r\nmargin: 0 auto;\r\n`;\r\nexport const LogoImg = styled.img`\r\nwidth: 200px;\r\n@media screen and (max-width: 500px) {\r\n    width: 150px;\r\n}\r\n\r\n`;\r\nexport const TMDBLogoImg = styled.img`\r\nwidth: 100px;\r\n@media screen and (max-width: 500px) {\r\n    width: 80px;\r\n}\r\n`;","import React from 'react'\r\nimport RMDBLogo from '../../images/react-movie-logo.svg';\r\nimport TMDBLogo from '../../images/tmdb_logo.svg';\r\nimport {Wrapper, Content, LogoImg, TMDBLogoImg} from './Header.styles';\r\nimport {Link} from 'react-router-dom';\r\n\r\nconst Header = () => (\r\n    <Wrapper>\r\n        <Content>\r\n            <Link to = '/'>\r\n            <LogoImg src={RMDBLogo} alt='rmdb-logo' />\r\n            </Link>\r\n            <TMDBLogoImg src={TMDBLogo} alt='tmdb-logo' />\r\n        </Content>\r\n    </Wrapper>\r\n)\r\nexport default Header;\r\n","// Configuration for TMDB API\r\n// Read more about the API here: https://developers.themoviedb.org/\r\n\r\nconst API_URL = 'https://api.themoviedb.org/3/';\r\nconst API_KEY = process.env.REACT_APP_API_KEY;\r\n\r\nconst SEARCH_BASE_URL = `${API_URL}search/movie?api_key=${API_KEY}&language=en-US&query=`;\r\nconst POPULAR_BASE_URL = `${API_URL}movie/popular?api_key=${API_KEY}&language=en-US`;\r\n// For login and voting\r\nconst REQUEST_TOKEN_URL = `${API_URL}authentication/token/new?api_key=${API_KEY}`;\r\nconst LOGIN_URL = `${API_URL}authentication/token/validate_with_login?api_key=${API_KEY}`;\r\nconst SESSION_ID_URL = `${API_URL}authentication/session/new?api_key=${API_KEY}`;\r\n\r\nconst IMAGE_BASE_URL = 'http://image.tmdb.org/t/p/';\r\n// Sizes: w300, w780, w1280, original\r\nconst BACKDROP_SIZE = 'w1280';\r\n// w92, w154, w185, w342, w500, w780, original\r\nconst POSTER_SIZE = 'w780';\r\n\r\nexport {\r\n  SEARCH_BASE_URL,\r\n  POPULAR_BASE_URL,\r\n  API_URL,\r\n  API_KEY,\r\n  IMAGE_BASE_URL,\r\n  BACKDROP_SIZE,\r\n  POSTER_SIZE,\r\n  REQUEST_TOKEN_URL,\r\n  LOGIN_URL,\r\n  SESSION_ID_URL,\r\n};\r\n","export default __webpack_public_path__ + \"static/media/no_image.22d2aa4d.jpg\";","import styled from 'styled-components'\r\n\r\n\r\nexport const Wrapper = styled.div`\r\nbackground: linear-gradient(\r\n    to bottom, rgba(0, 0, 0, 0)\r\n    41%, rgba(0, 0, 0, 65)\r\n    100%), url(${({ image }) => image}), var(--darkGrey);\r\n    background-size: 100%, auto;\r\n    background-position: center;\r\n    height: 600px;\r\n    position:relative;\r\n    animation: animateHeroImage 1s;\r\n\r\n    @keyframes animateHeroImage {\r\n        from {\r\n            opacity: 0\r\n        } to {\r\n            opacity: 1\r\n        }\r\n    }\r\n`;\r\n\r\nexport const Content = styled.div`\r\n\r\npadding: 20px;\r\nmax-width: var(--maxWidth);\r\nmargin: 0 auto;\r\n`;\r\n\r\nexport const Text = styled.div`\r\nz-index: 100;\r\nmax-width: 700px;\r\nposition: absolute;\r\nbottom: 40px;\r\nmargin-right: 20px;\r\nmin-height: 100px;\r\ncolor: var(--white);\r\n\r\nh1 {\r\n    font-size: var(--fontSuperBig);\r\n    @media screen and (max-width: 720px) {\r\n        font-size: var(--fontBig);\r\n    }\r\n}\r\n\r\np {\r\n    font-size: var(--fontMed);\r\n    @media screen and (max-width: 720px) {\r\n        font-size: var(--fontSmall)\r\n    }\r\n}\r\n\r\n@media screen and (max-width: 720px) {\r\n    max-width: 100\r\n}\r\n`;\r\n","import PropTypes from 'prop-types';\r\nimport React from 'react'\r\nimport {Wrapper, Content, Text} from './HeroImage.style'\r\n\r\nconst HeroImage = ({image, title, text}) => (\r\n    <Wrapper image={image}>\r\n        <Content>\r\n            <Text>\r\n                <h1>{title}</h1>\r\n                <p>{text}</p>\r\n            </Text>\r\n        </Content>\r\n    </Wrapper>\r\n);\r\n\r\nHeroImage.propTypes = {\r\n    image: PropTypes.string,\r\n    title: PropTypes.string,\r\n    text: PropTypes.string\r\n}\r\n\r\nexport default HeroImage","import {\r\n  SEARCH_BASE_URL,\r\n  POPULAR_BASE_URL,\r\n  API_URL,\r\n  API_KEY,\r\n  REQUEST_TOKEN_URL,\r\n  LOGIN_URL,\r\n  SESSION_ID_URL\r\n} from './config';\r\n\r\nconst defaultConfig = {\r\n  method: 'POST',\r\n  headers: {\r\n    'Content-Type': 'application/json'\r\n  }\r\n};\r\n\r\nconst apiSettings = {\r\n  fetchMovies: async (searchTerm, page) => {\r\n    const endpoint = searchTerm\r\n      ? `${SEARCH_BASE_URL}${searchTerm}&page=${page}`\r\n      : `${POPULAR_BASE_URL}&page=${page}`;\r\n    return await (await fetch(endpoint)).json();\r\n  },\r\n  fetchMovie: async movieId => {\r\n    const endpoint = `${API_URL}movie/${movieId}?api_key=${API_KEY}`;\r\n    return await (await fetch(endpoint)).json();\r\n  },\r\n  fetchCredits: async movieId => {\r\n    const creditsEndpoint = `${API_URL}movie/${movieId}/credits?api_key=${API_KEY}`;\r\n    return await (await fetch(creditsEndpoint)).json();\r\n  },\r\n  // Bonus material below for login\r\n  getRequestToken: async () => {\r\n    const reqToken = await (await fetch(REQUEST_TOKEN_URL)).json();\r\n    return reqToken.request_token;\r\n  },\r\n  authenticate: async (requestToken, username, password) => {\r\n    const bodyData = {\r\n      username,\r\n      password,\r\n      request_token: requestToken\r\n    };\r\n    // First authenticate the requestToken\r\n    const data = await (\r\n      await fetch(LOGIN_URL, {\r\n        ...defaultConfig,\r\n        body: JSON.stringify(bodyData)\r\n      })\r\n    ).json();\r\n    // Then get the sessionId with the requestToken\r\n    if (data.success) {\r\n      const sessionId = await (\r\n        await fetch(SESSION_ID_URL, {\r\n          ...defaultConfig,\r\n          body: JSON.stringify({ request_token: requestToken })\r\n        })\r\n      ).json();\r\n      return sessionId;\r\n    }\r\n  },\r\n  rateMovie: async (sessionId, movieId, value) => {\r\n    const endpoint = `${API_URL}movie/${movieId}/rating?api_key=${API_KEY}&session_id=${sessionId}`;\r\n\r\n    const rating = await (\r\n      await fetch(endpoint, {\r\n        ...defaultConfig,\r\n        body: JSON.stringify({ value })\r\n      })\r\n    ).json();\r\n\r\n    return rating;\r\n  }\r\n};\r\n\r\nexport default apiSettings;\r\n","// Convert time to hours and minutes\r\nexport const calcTime = time => {\r\n  const hours = Math.floor(time / 60);\r\n  const mins = time % 60;\r\n  return `${hours}h ${mins}m`;\r\n};\r\n// Convert a number to money formatting\r\nexport const convertMoney = money => {\r\n  const formatter = new Intl.NumberFormat('en-US', {\r\n    style: 'currency',\r\n    currency: 'USD',\r\n    minimumFractionDigits: 0,\r\n  });\r\n  return formatter.format(money);\r\n};\r\n\r\n//store data for optimization\r\nexport const isPersistedState = stateName => {\r\n  const sessionState = sessionStorage.getItem(stateName)\r\n  return sessionState && JSON.parse(sessionState)\r\n}","import { useEffect, useState } from \"react\";\r\nimport API from \"../API\";\r\nimport { isPersistedState } from \"../helpers\";\r\n\r\nconst initialState = {\r\n  page: 0,\r\n  results: [],\r\n  total_pages: 0,\r\n  total_results: 0,\r\n};\r\n\r\nexport const useHomeFetch = () => {\r\n  const [searchTerm, setSearchTerm] = useState(\"\");\r\n  const [state, setState] = useState(initialState);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(false);\r\n  const [isLoadingMore, setIsLoadingMore] = useState(false);\r\n\r\n  const fetchMovies = async (page, searchTerm = \"\") => {\r\n    try {\r\n      setError(false);\r\n      setLoading(true);\r\n      const movies = await API.fetchMovies(searchTerm, page);\r\n\r\n      setState((prev) => ({\r\n        ...movies,\r\n        results:\r\n          page > 0 ? [...prev.results, ...movies.results] : [movies.results],\r\n      }));\r\n    } catch (error) {\r\n      setError(true);\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!searchTerm) {\r\n      const sessionState = isPersistedState(\"homeState\");\r\n      if (sessionState) {\r\n        setState(sessionState);\r\n        return;\r\n      }\r\n    }\r\n    setState(initialState);\r\n    fetchMovies(1, searchTerm);\r\n  }, [searchTerm]);\r\n\r\n  useEffect(() => {\r\n    if (!isLoadingMore) return;\r\n    fetchMovies(state.page + 1, searchTerm);\r\n    setIsLoadingMore(false);\r\n  }, [isLoadingMore, searchTerm, state.page]);\r\n\r\n  useEffect(() => {\r\n    if (!searchTerm) sessionStorage.setItem(\"homeState\", JSON.stringify(state));\r\n  }, [searchTerm, state]);\r\n\r\n  return { state, loading, error, setSearchTerm, searchTerm, setIsLoadingMore };\r\n};\r\n","import styled from 'styled-components'\r\n\r\nexport const Wrapper = styled.div`\r\nmax-width: var(--maxWidth);\r\nmargin: 0 auto;\r\npadding: 0 20px;\r\n\r\nh1 {\r\n    color: var(--medGrey);\r\n    @media screen and (max-width: 760px) {\r\n        font-size: var(--fontBig);\r\n    }\r\n\r\n}\r\n`;\r\n\r\nexport const Content = styled.div`\r\ndisplay: grid;\r\ngrid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\r\ngrid-gap: 2rem;\r\n`;","import PropTypes from 'prop-types';\r\nimport React from 'react'\r\nimport {Wrapper, Content} from './Grid.styles'\r\n\r\nconst Grid = ({header, children}) => (\r\n    <Wrapper>\r\n        <h1>{header}</h1>\r\n        <Content>{children}</Content>\r\n    </Wrapper>\r\n);\r\n\r\nGrid.propTypes = {\r\n    header: PropTypes.string\r\n}\r\n\r\nexport default Grid;","import styled from 'styled-components'\r\n\r\nexport const Image = styled.img`\r\nwidth: 100%;\r\nmax-width: 720px;\r\ntransition: all 0.3s;\r\nobject-fit: cover;\r\nborder-radius: 20px;\r\nanimation: animateThumb 0.5s;\r\n\r\n:hover {\r\n    opacity: 0.8;\r\n}\r\n@keyframes animateThumb {\r\n    from {\r\n        opacity: 0\r\n    }\r\n    to{\r\n        opacity: 1\r\n    }\r\n}\r\n`;","import React from \"react\";\r\nimport { Image } from \"./Thumb.styles\";\r\nimport { Link } from \"react-router-dom\";\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Thumb = ({ image, movieId, clickable }) => (\r\n  <div>\r\n    {clickable ? (\r\n      <Link to={`/${movieId}`}>\r\n        <Image src={image} alt=\"movie-thumb\" />\r\n      </Link>\r\n    ) : (\r\n      <Image src={image} alt=\"movie-thumb\" />\r\n    )}\r\n  </div>\r\n);\r\n\r\nThumb.propTypes = {\r\n  image: PropTypes.string,\r\n  movieId: PropTypes.number,\r\n  clickable: PropTypes.bool\r\n}\r\n\r\nexport default Thumb;\r\n","import {Spinner} from './Spinner.styles'\r\n\r\nexport default Spinner;","import styled from 'styled-components';\r\n\r\nexport const Spinner = styled.div`\r\nborder: 5px solid var(--lightGrey);\r\nborder-top: 5px solid var(--medGrey);\r\nborder-radius: 50%;\r\nwidth: 50px;\r\nheight: 50px;\r\nanimation: spin 0.8s linear infinite;\r\nmargin: 20px auto;\r\n\r\n\r\n@keyframes spin {\r\n    0% {\r\n        transform: rotate(0deg);\r\n    }\r\n    100% {\r\n        transform: rotate(360deg);\r\n    }\r\n}\r\n`","export default __webpack_public_path__ + \"static/media/search-icon.bb4c697f.svg\";","import styled from 'styled-components'\r\n\r\nexport const Wrapper = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    height: 100px;\r\n    background: var(--darkGrey);\r\n    padding: 0 20px;   \r\n    `;\r\n\r\nexport const Content = styled.div`\r\nposition: relative;\r\nmax-width: var(--maxWidth);\r\nwidth: 100%;\r\nheight: 55px;\r\nmargin: 0 auto;\r\nbackground: var(--medGrey);\r\nborder-radius: 40px;\r\ncolor: var(--white);\r\n\r\nimg {\r\n    position: absolute;\r\n    left: 15px;\r\n    top: 14px;\r\n    width: 30px;\r\n}\r\n\r\ninput {\r\n    font-size: var(--fontBig);\r\n    position: absolute;\r\n    left: 0;\r\n    margin: 8px;\r\n    padding: 0 0 0 60px;\r\n    border: 0;\r\n    width: 95%;\r\n    background: transparent;\r\n    height: 40px;\r\n    color: var(--white);\r\n    :focus {\r\n        outline: none;\r\n    }\r\n}\r\n`;\r\n\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\n//Image icon\r\nimport searchIcon from \"../../images/search-icon.svg\";\r\n//styles\r\nimport { Wrapper, Content } from \"./SearchBar.styles\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst SearchBar = ({ setSearchTerm }) => {\r\n  const [state, setState] = useState(\"\");\r\n  const initial = useRef(true);\r\n\r\n  useEffect(() => {\r\n    if (initial.current) {\r\n      initial.current = false;\r\n      return;\r\n    }\r\n\r\n    const timer = setTimeout(() => {\r\n      setSearchTerm(state);\r\n    }, 500);\r\n\r\n    return () => clearTimeout(timer);\r\n  }, [setSearchTerm, state]);\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Content>\r\n        <img src={searchIcon} alt=\"search-icon\" />\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Search Movie\"\r\n          value={state}\r\n          onChange={(e) => setState(e.target.value)}\r\n        />\r\n      </Content>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nSearchBar.propTypes = {\r\n  setSearchTerm: PropTypes.func,\r\n};\r\n\r\nexport default SearchBar;\r\n","import styled from 'styled-components'\r\n\r\nexport const Wrapper = styled.button`\r\ndisplay: block;\r\nbackground: var(--darkGrey);\r\nwidth: 25%;\r\nmin-width: 200px;\r\nheight: 60px;\r\nborder-radius: 30px;\r\ncolor: var(--white);\r\nborder: 0;\r\nfont-size: var(--fontBig);\r\nmargin: 20px auto;\r\ntransition: all 0.3s;\r\noutline: none;\r\ncursor: pointer;\r\n\r\n:hover {\r\n    opacity: 0.8\r\n}\r\n`;","import PropTypes from \"prop-types\";\r\nimport React from \"react\";\r\nimport {Wrapper} from './Button.styles'\r\n\r\nconst Button = ({text, callback}) => (\r\n    <Wrapper type='button' onClick={callback}>\r\n        {text}\r\n    </Wrapper>\r\n)\r\n\r\nButton.propTypes = {\r\n    text: PropTypes.string,\r\n    callback: PropTypes.func\r\n}\r\nexport default Button;","\r\n//config\r\nimport {POSTER_SIZE, BACKDROP_SIZE, IMAGE_BASE_URL} from '../config';\r\n//Image\r\nimport NoImage from '../images/no_image.jpg';\r\n//components\r\nimport HeroImage from './HeroImage'\r\n//hook\r\nimport { useHomeFetch } from '../hooks/useHomeFecth';\r\nimport Grid from './Grid'\r\nimport Thumb from './Thumb'\r\nimport Spinner from './Spinner'\r\nimport SearchBar from './SearchBar';\r\nimport Button from './Bottom/index.';\r\n\r\nconst Home = () => {\r\n    const {state, loading, error, setSearchTerm, searchTerm, setIsLoadingMore} = useHomeFetch()\r\n\r\n    if (error) return <div>Something went wrong...</div>\r\n\r\n    return (<>\r\n    {!searchTerm && state.results[0] ? \r\n    <HeroImage\r\n        image={`${IMAGE_BASE_URL}${BACKDROP_SIZE}${state.results[0].backdrop_path}`}\r\n        title={state.results[0].original_title}\r\n        text={state.results[0].overview}\r\n        \r\n        /> : 'null' }\r\n        <SearchBar setSearchTerm= {setSearchTerm}/>\r\n        <Grid header= {searchTerm ? 'Search results' : 'Popular Movies'}>\r\n            {state.results.map(({id, poster_path}) => (\r\n                <Thumb \r\n                key={id}\r\n                 clickable\r\n                 image={\r\n                     poster_path\r\n                     ? IMAGE_BASE_URL + POSTER_SIZE + poster_path\r\n                     : NoImage\r\n                 }\r\n                 movieId={id} \r\n                 />\r\n            ))}\r\n        </Grid>\r\n        {loading && <Spinner/>}\r\n        {state.page < state.total_pages && !loading && (\r\n            <Button text='Load More' callback= {() => setIsLoadingMore(true)}/>\r\n        )}\r\n        </>)\r\n};\r\n\r\nexport default Home;\r\n ","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  width: 100%;\r\n  height: 70px;\r\n  background: var(--medGrey);\r\n  color: var(--white);\r\n`;\r\n\r\nexport const Content = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  max-width: var(--maxWidth);\r\n  padding: 0 20px;\r\n  span {\r\n    font-size: var(--fontMed);\r\n    color: var(--white);\r\n    padding-right: 10px;\r\n    @media screen and (max-width: 768px) {\r\n      font-size: var(--fontSmall);\r\n    }\r\n  }\r\n`;\r\n","import PropTypes from \"prop-types\";\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Wrapper, Content } from \"./BreadCrumb.styles\";\r\nconst BreadCrumb = ({ movieTitle }) => (\r\n  <Wrapper>\r\n    <Content>\r\n      <Link to=\"/\">\r\n        <span>Home</span>\r\n      </Link>\r\n      <span>|</span>\r\n      <span>{movieTitle}</span>\r\n    </Content>\r\n  </Wrapper>\r\n);\r\n\r\nBreadCrumb.propTypes = {\r\n  movieTitle: PropTypes.string\r\n}\r\n\r\nexport default BreadCrumb;\r\n","import styled from \"styled-components\";\r\nimport { IMAGE_BASE_URL, BACKDROP_SIZE } from \"../../config\";\r\n\r\nexport const Wrapper = styled.div`\r\n  background: ${({ backdrop }) =>\r\n    backdrop ? `url(${IMAGE_BASE_URL}${BACKDROP_SIZE}${backdrop})` : \"#000\"};\r\n  background-size: cover;\r\n  background-position: center;\r\n  padding: 40px 20px;\r\n  animation: animateMovieInfo 1s;\r\n\r\n  @keyframes {\r\n    from {\r\n      opacity: 0;\r\n    }\r\n    to {\r\n      opacity: 1;\r\n    }\r\n  }\r\n`;\r\n\r\nexport const Content = styled.div`\r\n  display: flex;\r\n  max-width: var(--maxWidth);\r\n  margin: 0 auto;\r\n  background: rgba(0, 0, 0, 0.7);\r\n  border-radius: 20px;\r\n\r\n  @media screen and (max-width: 768px) {\r\n    display: block;\r\n    max-height: none;\r\n  }\r\n`;\r\n\r\nexport const Text = styled.div`\r\n  width: 100%;\r\n  padding: 20px 40px;\r\n  color: var(--white);\r\n  overflow: hidden;\r\n\r\n  .rating-directors {\r\n    display: flex;\r\n    justify-content: flex-start;\r\n  }\r\n\r\n  .score {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    width: 35px;\r\n    height: 35px;\r\n    background: #fff;\r\n    color: #000;\r\n    font-weight: 100;\r\n    border-radius: 50%;\r\n    margin: 0;\r\n  }\r\n\r\n  .director {\r\n    margin: 0 0 0 40px;\r\n\r\n    p {\r\n      margin: 0;\r\n    }\r\n  }\r\n  h1 {\r\n    @media screen and (max-width: 768px) {\r\n      font-size: var(--fontBig);\r\n    }\r\n  }\r\n`;\r\n","import Thumb from \"../Thumb\";\r\nimport { IMAGE_BASE_URL, POSTER_SIZE } from \"../../config\";\r\nimport NoImage from \"../../images/no_image.jpg\";\r\nimport { Wrapper, Content, Text } from \"./MovieInfo.styles\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst MovieInfo = ({ movie }) => (\r\n  <Wrapper backdrop={movie.backdrop_path}>\r\n    <Content>\r\n      <Thumb\r\n        image={\r\n          movie.poster_path\r\n            ? `${IMAGE_BASE_URL}${POSTER_SIZE}${movie.poster_path}`\r\n            : NoImage\r\n        }\r\n        clickable={false}\r\n      />\r\n      <Text>\r\n        <h1>{movie.title}</h1>\r\n        <h3>PLOT</h3>\r\n        <p>{movie.overview}</p>\r\n        <div className=\"rating-directors\">\r\n          <div>\r\n            <h3>RATING</h3>\r\n            <div className=\"score\">{movie.vote_average}</div>\r\n          </div>\r\n          <div className=\"director\">\r\n            <h3>DIRECTOR{movie.directors.length > 1 ? \"S\" : \"\"}</h3>\r\n            {movie.directors.map((director) => (\r\n              <p key={director.credit_id}>{director.name}</p>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </Text>\r\n    </Content>\r\n  </Wrapper>\r\n);\r\n\r\nMovieInfo.propTypes = {\r\n  movie: PropTypes.object\r\n}\r\n\r\nexport default MovieInfo;\r\n","import styled from 'styled-components'\r\n\r\nexport const Wrapper = styled.div`\r\ndisplay: flex;\r\nalign-items: center;\r\nmin-height: 100px;\r\nbackground: var(--darkGrey);\r\npadding: 0 20px;\r\n`;\r\n\r\nexport const Content = styled.div`\r\ndisplay: flex;\r\nmax-width: var(--maxWidth);\r\nwidth: 100%;\r\nmargin: 0 auto;\r\n.column {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    background: var(--medGrey);\r\n    border-radius: 20px;\r\n    margin: 0 20px;\r\n    flex: 1;\r\n    :first-child {\r\n        margin-left: 0;\r\n    }\r\n    :last-child {\r\n        margin-right: 0\r\n    }\r\n}\r\n@media screen and (max-width: 768px) {\r\n    display: block;\r\n    .column {\r\n        margin: 20px 0;\r\n    }\r\n}\r\n\r\n`;","import { calcTime, convertMoney } from \"../../helpers\";\r\nimport { Wrapper, Content } from \"./MovieInfoBar.styles\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst MovieInfoBar = ({ time, budget, revenue }) => (\r\n  <Wrapper>\r\n    <Content>\r\n      <div className=\"column\">\r\n        <p>Running Time: {calcTime(time)}</p>\r\n      </div>\r\n      <div className=\"column\">\r\n        <p>Budget: {convertMoney(budget)}</p>\r\n      </div>\r\n      <div className=\"column\">\r\n        <p>Revenue: {convertMoney(revenue)}</p>\r\n      </div>\r\n    </Content>\r\n  </Wrapper>\r\n);\r\n\r\nMovieInfoBar.propTypes = {\r\n  time: PropTypes.number,\r\n  budget: PropTypes.number,\r\n  revenue: PropTypes.number,\r\n};\r\n\r\nexport default MovieInfoBar;\r\n","import styled from 'styled-components'\r\n\r\nexport const Wrapper = styled.div`\r\n    color: var(--white);\r\n    background: var(--darkGrey);\r\n    border-radius: 20px;\r\n    padding: 5px;\r\n    text-align: center;\r\n    h3 {\r\n        margin: 10px 0 0 0;\r\n    }\r\n    p{\r\n        margin: 5px 0;\r\n    }\r\n`;\r\n\r\nexport const Image = styled.img`\r\n    display: block;\r\n    width: 100%;\r\n    height: 200px;\r\n    object-fit: cover;\r\n    border-radius: 15px;\r\n`;","import PropTypes from \"prop-types\";\r\nimport { Wrapper, Image } from \"./Actor.styles\";\r\n\r\nconst Actor = ({ imageUrl, name, character }) => (\r\n  <Wrapper>\r\n    <Image src={imageUrl} alt=\"actor-thumb\" />\r\n    <h3>{name}</h3>\r\n    <p>{character}</p>\r\n  </Wrapper>\r\n);\r\n\r\nActor.propTypes = {\r\n    name: PropTypes.string,\r\n    character: PropTypes.string,\r\n    imageUrl: PropTypes.string\r\n}\r\n\r\nexport default Actor;\r\n","import React from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\n//config\r\nimport { IMAGE_BASE_URL, POSTER_SIZE } from \"../config\";\r\n//components\r\nimport Grid from \"./Grid\";\r\nimport Spinner from \"./Grid\";\r\nimport BreadCrumb from \"./BreadCrumb\";\r\nimport MovieInfo from \"./MovieInfo\";\r\nimport MovieInfoBar from \"./MovieInfoBar\";\r\nimport Actor from \"./Actor\";\r\n//Image\r\nimport NoImage from \"../images/no_image.jpg\";\r\n//hook\r\nimport { useMovieFetch } from \"../hooks/useMovieFetch\";\r\n\r\nconst Movie = () => {\r\n  const { movieId } = useParams();\r\n  const { state: movie, loading, error } = useMovieFetch(movieId);\r\n  if (loading) return <Spinner />;\r\n  if (error) return <div>Something went Wrong...</div>;\r\n  return (\r\n    <>\r\n      <BreadCrumb movieTitle={movie.original_title} />\r\n      <MovieInfo movie={movie} />\r\n      <MovieInfoBar\r\n        time={movie.runtime}\r\n        budget={movie.budget}\r\n        revenue={movie.revenue}\r\n      />\r\n      <Grid header=\"Actors\" >\r\n        {movie.actors.map(actor => (\r\n          <Actor\r\n          key={actor.credit_id} \r\n          name= {actor.name}\r\n          character= {actor.character}\r\n          imageUrl={\r\n            actor.profile_path ?\r\n            `${IMAGE_BASE_URL}${POSTER_SIZE}${actor.profile_path}`\r\n            : NoImage\r\n          }\r\n          />\r\n        ))}\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Movie;\r\n","import { useState, useEffect, useCallback } from \"react\";\r\nimport API from \"../API\";\r\nimport { isPersistedState } from \"../helpers\";\r\n\r\nexport const useMovieFetch = (movieId) => {\r\n  const [state, setState] = useState({});\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(false);\r\n\r\n  const fetchMovie = useCallback(async () => {\r\n    try {\r\n      setLoading(true);\r\n      setError(false);\r\n      const movie = await API.fetchMovie(movieId);\r\n      const credits = await API.fetchCredits(movieId);\r\n      // get directors only\r\n      const directors = credits.crew.filter(\r\n        (member) => member.job === \"Director\"\r\n      );\r\n      setState({ ...movie, actors: credits.cast, directors });\r\n      setLoading(false);\r\n    } catch {\r\n      setError(true);\r\n    }\r\n  }, [movieId]);\r\n\r\n  useEffect(() => {\r\n    const sessionState = isPersistedState(movieId);\r\n    if (sessionState) {\r\n      setState(sessionState);\r\n      setLoading(false);\r\n      return;\r\n    }\r\n    fetchMovie();\r\n  }, [movieId, fetchMovie]);\r\n\r\n  useEffect(() => {\r\n    sessionStorage.setItem(movieId, JSON.stringify(state));\r\n  }, [movieId, state]);\r\n  return { state, loading, error, fetchMovie };\r\n};\r\n","import React from \"react\";\r\n\r\nconst NotFound = () => <div>NotFound</div>\r\n\r\nexport default NotFound;","import React from 'react';\r\n//routing\r\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\r\n//styles\r\nimport {GlobalStyle} from './GlobalStyle';\r\n//components\r\nimport Header from './components/Header';\r\nimport Home from './components/Home';\r\nimport Movie from './components/Movie'\r\nimport NotFound from './components/NotFound'\r\n\r\n\r\n\r\nconst App = () => (\r\n    <Router>\r\n      <Header/>\r\n      <Routes>\r\n        <Route path = \"/\" element = {<Home/>} />\r\n        <Route path = '/:movieId' element = {<Movie/>} />\r\n        <Route path = '/*' element = {<NotFound/>} />\r\n      </Routes>\r\n      <GlobalStyle /> \r\n    </Router>\r\n  );\r\n \r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}